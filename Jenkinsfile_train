pipeline {
  agent any

  stages {
    stage('Check and Stop Existing Container') {
            steps {
                script {
                    def containerId = sh(script: "docker ps --filter 'publish=5000' --format '{{.ID}}'", returnStdout: true).trim()

                    if (containerId) {
                        // Stop the container
                        sh "docker stop ${containerId}"
                        echo "Stopped container ${containerId} that was using port 5000"

                        // Verify the container is stopped
                        def containerRunning = sh(script: "docker ps --filter 'id=${containerId}' --format '{{.ID}}'", returnStdout: true).trim()

                        if (containerRunning) {
                            error "Failed to stop container ${containerId}. Manual intervention required."
                        } else {
                            echo "Container ${containerId} successfully stopped."
                        }
                    } else {
                        echo "No container found using port 5000."
                    }
                }
            }
        }
    stage('Build') {
      steps {
        sh 'docker build -t my-flask-app .'
        sh 'docker tag my-flask-app $DOCKER_BFLASK_IMAGE'
      }
    }

    stage('Retraining model') {
        steps  {
          script {
                       def containerId = docker.image("volzhinnikita/jenkins:latest").run('-d').id
                       sh "docker exec ${containerId} python train.py"
                       sh "docker commit ${containerId} volzhinnikita/jenkins:latest"
                       sh "docker stop ${containerId}"
                    }
        }
    }
     stage('Test') {
       steps {
         sh 'docker run volzhinnikita/jenkins:latest python -m pytest evaluate.py'
       }
     }

   stage('Deploy') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
          sh "echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin docker.io"
          sh 'docker push $DOCKER_BFLASK_IMAGE'
          sh 'docker run $DOCKER_BFLASK_IMAGE ls'
          sh 'docker run $DOCKER_BFLASK_IMAGE ls model'
        }
      }
    }
    stage('Pull Image From Registry') {
      steps {
      script{
          def containerId = docker.image("volzhinnikita/jenkins:latest").run('-d').id
          sh "docker stop ${containerId}"
        sh 'docker pull $DOCKER_BFLASK_IMAGE'
        sh 'docker run -p 5000:5000 -p 8000:8000 -td $DOCKER_BFLASK_IMAGE'
        }
      }
    }

  }

}